#include <iostream>
using namespace std;

class node{
  public:
  int data;
  node* next;
  node(int data){
      this->data=data;
      this->next=NULL;
  }
};
node* mark=NULL;

//ðŸ‘‰ insertAt head
void insertAtHead(int data,node* & head){
    node* temp=new node(data);
    if(head==NULL){
        head=temp;
    }
    else{
        temp->next=head;
        head=temp;
    }
}
void print(node* head){
    if(head==NULL)cout<<"Empty ll";
    else{
        node* temp=head;
        while(temp!=NULL){
            cout<<temp->data<<" ";
            temp=temp->next;
        }
    }
}
//ðŸ‘‰ delet from head
void deletHead(node*& head){
    if(head==NULL)cout<<" LL is empty";
    if(head->next==NULL)
    {
      head=NULL;
    }
    else {
    node*temp=head;
    node*check=temp;
    while(temp->next!=NULL){
        check=temp;
        temp=temp->next;
    }
    check->next=NULL;
}
    
}
// ðŸ‘‰ Insert from  tail
void insertAtTail(int data,node*& tail){
    node* temp=new node(data);
    if(tail==NULL){
        tail=temp;
        mark=tail;
    }
    else{
        tail->next=temp;
        tail=temp;
    }
}
// ðŸ‘‰ delete from  tail
void deleteTail(){
    if(mark==NULL)cout<<"empty ll";
    else if(mark->next==NULL){
        mark=NULL;
    }
    else{
        node* temp=mark;
        node* check=temp;
        while(temp->next!=NULL){
            check=temp;
            temp=temp->next;
        }
        check->next=NULL;
    }
}
void printTail(){
    if(mark==NULL)cout<<"empty ll";
    node* temp=mark;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
}
int main() {
// ðŸ‘‰ Insert from head
    node* head=NULL;
    insertAtHead(10,head);
    insertAtHead(20,head);
    print(head);
    cout<<"After delete";
// ðŸ‘‰ delete from head
    
    deletHead(head);
    
    print(head);
     deletHead(head);
     cout<<" Again";
     print(head);
    cout<<endl;
    
// ðŸ‘‰ Insert from  tail
    node*tail=NULL;
    insertAtTail(10,tail);
    insertAtTail(20,tail);
    printTail();
    cout<<"After delete \n";
// ðŸ‘‰ delete from  tail
    deleteTail();
    deleteTail();
    printTail();
        return 0;
}

Output--------------
20 10 
After delete 20  
Again
Empty ll
10 20 After delete 
empty ll
